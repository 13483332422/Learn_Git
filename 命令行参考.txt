##########################1.创建版本库

在安装好Git的前提下,进入某个文件夹.
右键Git bash here
输入
git init
即可创建成功

##########################2.连接远程仓库
*本地版本库连接远远程仓库
键入命令
git remote add 名字 地址

例如: git remote add lg https://github.com/13483332422/Learn_Git.git
即可
*克隆一个仓库
git clone https://github.com/13483332422/Numerical_solutions_of_differential_equations.git


##########################3.修改本地版本库名字
比如 我们本来想 命名为LG ,但是命名为lg
键入命令
git remote rename 旧名字 新名字

例如: git remote rename lg LG
即可

##########################4.添加文件到暂存器
键入命令
git add XX
把xx文件添加到暂存区去。



##########################5.将文件提交到本地版本库
git commit –m '注释'  
提交文件 –m 后面的是注释。

git commit 提交的时候，你会发现编辑器里你怎么输入都没反应，
这是因为vim处在不可编辑状态，按下字母键 c，
此时进入编辑状态可以开始修改注释信息了
然后 你会发现你怎么都退出不了，回到shell了，
然后操作如下： ESC  --》 退出编辑状态；
接着 连续按两次大写字母键 Z，
接着你会惊喜的发现，终于保存好退出来了！

##########################6.查看当前工作区等状态
git status
查看仓库状态

   

##########################7.查看修改历史
git diff  XX
查看XX文件修改了那些内容



##########################8.查看历史记录
git log

如果嫌输出信息太多，看得眼花缭乱的，可以试试
git log --pretty=oneline

##########################9.撤销工作区的修改
git checkout — XX  
把XX文件在工作区的修改全部撤销。

##########################10.回退到某个版本(前提是没有push到远程仓库,只进行了commit)

回到上个版本
git reset --hard HEAD^
 
同理 回退到上上个版本
git reset --hard HEAD^ ^

当然往上100个版本写100个^比较容易数不过来，所以写成
git reset --hard HEAD~100

当然 可以直接跳到某个版本:
先通过 
git log --oneline
查看之前本的版本号 
然后通过
git reset --hard 版本号 
进行回退或前进到某个具体的版本

##########################11.回退到某个版本(已经push到远程仓库)
比如里边有个文件上传错了,内容错误等
可以先把文件复制走,再执行 
rm 需要修改的文件名字
git add 需要修改的文件名字
git commit -m 'xxx'
git push xxx master

再把文件复制进来
****************************************
鉴于此,push到远程库时一定要看仔细了再push*
****************************************

##########################12.撤销修改
把文件在工作区的修改全部撤销
git checkout -- readme.txt
就是让这个文件回到最近一次git commit或git add时的状态

把暂存区的修改撤销掉（unstage），重新放回工作区
git reset HEAD <file>

###########################13.提交到远程版本库
git push xx master #默认主分支


**************************************************************************
到这里最最最基本的命令行已经结束了(当然如果有,我会继续添加)
**************************************************************************
下面开始学习Git的分支概念,参考链接:
https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。
截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
HEAD(是一个指针)严格来说不是指向提交，而是指向master，master才是指向提交的，
所以，HEAD指向的就是当前分支。
一开始的时候，master分支是一条线，Git用master指向最新的提
再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，
再把HEAD指向dev，就表示当前分支在dev上：
(Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！)
假如我们在dev上的工作完成了，就可以把dev合并到master上。
Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并.
合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支.
****************************************************************************

##########################1.创建一个分支
git checkout -b 名字

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

git branch 名字 #创建
git checkout 名字#切换到该分支

****************
为了和 checkout -- filename (将该文件在工作区的修改全部撤销)区别
最新版本Git将 切换分支改为(checkout也还能用,创建分支命令不变):
git switch <name>

即 
git checkout <name> 等价于 git switch <name>#切换到<name>分支
git checkout -b <name> 等价于 git switch -c <name>#创建+切换分支

****************

##########################1.创建一个分支




























